{"version":3,"sources":["images/logo.png","components/wrapper.js","components/header.js","components/dataArea.js","components/main.js","components/footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Wrapper","props","className","children","Header","DataArea","state","employees","allEmployees","sortConfig","direction","headings","handlePositionChange","event","position","target","value","setState","filter","employee","requestSort","key","prevState","setSortConfig","fetch","then","response","json","isLoading","catch","error","console","log","this","sort","a","b","age","htmlFor","onChange","id","onClick","map","alt","src","pic","name","email","phone","Component","Main","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2c88b829.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5c5bfc0b.png\";","import React from \"react\";\n\nfunction Wrapper(props) {\n  return <div className=\"Wrapper\">{props.children}</div>;\n}\nexport default Wrapper;\n","import React from \"react\";\nimport logo from \"../images/logo.png\";\n\nfunction Header() {\n  return (\n    <div className=\"Header\">\n      <h1 >Employee Directory</h1>\n    </div>\n  );\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\n\nexport default class DataArea extends Component {\n    state = {\n    employees: [],\n    allEmployees: [],\n    sortConfig:\"age\",\n    direction:\"ascending\"\n    };\n    headings = [\"name...\"];\n\n    componentDidMount() {\n    fetch(\"/employees.json\")\n        .then(function (response) {\n            return response.json();\n        })\n        .then((response) => {\n        this.setState({\n            employees: response,\n            allEmployees: response,\n            isLoading: false,\n        });\n        })\n        .catch((error) => {\n            console.log(error);\n        });\n    }\n\n    handlePositionChange = (event) => {\n    const position = event.target.value;\n    if (position === \"All\") {\n            this.setState({ employees: this.state.allEmployees });\n        } else {\n            this.setState({\n            employees: this.state.allEmployees.filter(function (employee) {\n                if (employee.position === position) {\n                return true;\n                }\n                return false;\n            }),\n        });\n    }\n    };\n\n    setSortConfig(){\n        const {direction} = this.state;\n        \n        this.setState(prevState => ({\n            employees: prevState.employees.sort(function(a, b){\n                \n                return (direction === \"descending\" ? a.age-b.age : b.age-a.age);\n            })\n        }));\n    }\n    requestSort = key => {\n        this.setState(prevState => ({\n            sortConfig: key,\n            direction: prevState.direction === \"ascending\"?\"descending\":\"ascending\"\n        }));\n        this.setSortConfig();\n        \n    };\n\n  render() {\n      console.log(\"test\", this.state.sortConfig, this.state.direction,this.state.employees);\n    return (\n      <div>\n        <div>\n          <label htmlFor=\"position\">Filter by position:</label>\n          <select onChange={this.handlePositionChange} id=\"position\">\n            <option value=\"All\">All</option>\n            <option value=\"Sound Engineer\">Sound Engineer</option>\n            <option value=\"Producer\">Producer</option>\n            <option value=\"Music Engineer\">Music Engineer</option>\n            <option value=\"Tech Support\">Tech Support</option>\n          </select>\n        </div>\n        <table className=\"table table-striped table-hover\">\n          <thead className=\"thead-dark\">\n            <tr>\n              <th>Profile Pic</th>\n              <th>Name</th>\n              <th>Position</th>\n              <th onClick={() => this.requestSort('age')} className={this.state.direction === \"descending\" ? \"descending\":\"ascending\"}>Age</th>\n              <th>Email</th>\n              <th>Phone</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.employees.map(function (employee) {\n              return (\n                <tr key={employee.id}>\n                  <td>\n                    <img alt=\"pic\" src={employee.pic}></img>\n                  </td>\n                  <td>{employee.name}</td>\n                  <td>{employee.position}</td>\n                  <td>{employee.age}</td>\n                  <td>{employee.email}</td>\n                  <td>{employee.phone}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport DataArea from \"./dataArea\";\n\nfunction Main() {\n  return (\n    <div className=\"Main\">\n      <DataArea />\n    </div>\n  );\n}\n\nexport default Main;\n","import React from \"react\";\n\nfunction Footer() {\n  return <div className=\"Footer\"></div>;\n}\n\nexport default Footer;\n","import React from \"react\";\nimport Wrapper from \"./components/wrapper\";\nimport Header from \"./components/header\";\nimport Main from \"./components/main\";\nimport Footer from \"./components/footer\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"body\">\n        <Wrapper>\n          <Header />\n          <Main />\n          <Footer />\n        </Wrapper>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}